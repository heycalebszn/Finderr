#!/usr/bin/env node

import {ArgumentParser, ArgumentDefaultsHelpFormatter, BooleanOptionalAction} from 'argparse';

import {scan_for_ble_advertisements} from './ble.mjs';

import mqtt from 'async-mqtt';

const DEFAULT_ADVERTISEMENTS_RETAIN = false;

const DEFAULT_ADVERTISEMENTS_TOPIC = '#{base_topic}/advertisements';

const DEFAULT_BASE_TOPIC = 'ble-scan';

const DEFAULT_CLIENT_ID = 'ble-scan';

const DEFAULT_CONNECT_TIMEOUT = 5;

const DEFAULT_HOST = '127.0.0.1';

const DEFAULT_INTERVAL = 60;

const DEFAULT_KEEPALIVE = 60;

const DEFAULT_OFFLINE_MESSAGE = 'offline';

const DEFAULT_ONLINE_MESSAGE = 'online';

const DEFAULT_PASSWORD = null;

const DEFAULT_PORT = 1883;

const DEFAULT_QOS = 2;

const DEFAULT_STATUS_RETAIN = true;

const DEFAULT_STATUS_TOPIC = '#{base_topic}/status';

const DEFAULT_TIME = 12;

const DEFAULT_USERNAME = null;

const run = ({
	advertisements_retain=DEFAULT_ADVERTISEMENTS_RETAIN,
	advertisements_topic=DEFAULT_ADVERTISEMENTS_TOPIC,
	base_topic=DEFAULT_BASE_TOPIC,
	client_id=DEFAULT_CLIENT_ID,
	connect_timeout=DEFAULT_CONNECT_TIMEOUT,
	host=DEFAULT_HOST,
	interval=DEFAULT_INTERVAL,
	keepalive=DEFAULT_KEEPALIVE,
	offline_message=DEFAULT_OFFLINE_MESSAGE,
	online_message=DEFAULT_ONLINE_MESSAGE,
	password=DEFAULT_PASSWORD,
	port=DEFAULT_PORT,
	qos=DEFAULT_QOS,
	status_retain=DEFAULT_STATUS_RETAIN,
	status_topic=DEFAULT_STATUS_TOPIC,
	time=DEFAULT_TIME,
	username=DEFAULT_USERNAME,
}) => (new Promise((resolve, reject) => {
	advertisements_topic = advertisements_topic.replace(/#{base_topic}/g, base_topic);
	status_topic = status_topic.replace(/#{base_topic}/g, base_topic);
	const mqtt_client = mqtt.connect({
		clientId:client_id,
		keepalive:keepalive,
		password:password,
		servers:[{host:host, port:port}],
		username:username,
		will: {
			payload:offline_message,
			qos:qos,
			retain:status_retain,
			topic:status_topic,
		},
	});
	mqtt_client.on('connect', async () => {
		try {
			await mqtt_client.publish(status_topic, online_message, {
				qos:qos,
				retain:status_retain,
			});
			await scan_for_ble_advertisements(async (ble_advertisement) => {
				await mqtt_client.publish(advertisements_topic, JSON.stringify(ble_advertisement), {
					qos:qos,
					retain:advertisements_retain,
				});
			}, interval);
			setTimeout(() => {
				resolve();
			}, Math.round(args.time * 1000));
		} catch(error) {
			reject(error);
		}
	});
	mqtt_client.on('error', (error) => {
		reject(error);
	});
	setTimeout(() => {
		if (! mqtt_client.connected) {
			reject(new Error('Unable to connect (Incorrect hostname or port?)'));
		}
	}, Math.round(connect_timeout * 1000));
}))

const args_parser = (new ArgumentParser({
	description:'Scan for BLE (Bluetooth Low Energy) advertisements',
	formatter_class: ArgumentDefaultsHelpFormatter,
}));
args_parser.add_argument('--interval', '-i', {
	help:'The minimum interval between publishing two advertisements from the same peripheral, in seconds (0=publish all advertisements)',
	type:'float',
	default:DEFAULT_INTERVAL,
});
args_parser.add_argument('--time', '-t', {
	help:'The time to scan for BLE advertisements, in seconds. After the specified time has passed, the program will terminate (0=scan forever)',
	type:'float',
	default:DEFAULT_TIME,
});
args_parser.add_argument('--host', '-H', {
	help:'The hostname/IP address of the the broker',
	type:'str',
	default:DEFAULT_HOST,
});
args_parser.add_argument('--port', '-p', {
	help:'The port number of the the broker',
	type:'int',
	default:DEFAULT_PORT,
});
args_parser.add_argument('--client_id', '-c', {
	help:'The client ID to use for connecting to the broker',
	type:'str',
	default:DEFAULT_CLIENT_ID,
});
args_parser.add_argument('--username', '-u', {
	help:'The username required by your broker, if any',
	type:'str',
	default:DEFAULT_USERNAME,
});
args_parser.add_argument('--password', '-P', {
	help:'The password required by your broker, if any',
	type:'str',
	default:DEFAULT_PASSWORD,
});
args_parser.add_argument('--base_topic', '-bt', {
	help:'The "base" topic. When passing topic names, the substring "#{base_topic}" will be replaced with this value',
	type:'str',
	default:DEFAULT_BASE_TOPIC,
});
args_parser.add_argument('--advertisements_topic', '-at', {
	help:'The topic where scanned BLE advertisement messages will be published to',
	type:'str',
	default:DEFAULT_ADVERTISEMENTS_TOPIC,
});
args_parser.add_argument('--status_topic', '-st', {
	help:'The topic where status messages will be published to',
	type:'str',
	default:DEFAULT_STATUS_TOPIC,
});
args_parser.add_argument('--online_message', {
	help:'The message that will be published to the status topic when going online',
	type:'str',
	default:DEFAULT_ONLINE_MESSAGE,
});
args_parser.add_argument('--offline_message', {
	help:'The message that will be published to the status topic when going offline',
	type:'str',
	default:DEFAULT_OFFLINE_MESSAGE,
});
args_parser.add_argument('--status_retain', '-sr', {
	help:'The retain flag for status (online/offline) messages',
	action:BooleanOptionalAction,
	default:DEFAULT_STATUS_RETAIN,
});
args_parser.add_argument('--qos', '-q', {
	help:'The QOS (Quality of service) level to use',
	type:'int',
	choices:[0, 1, 2],
	default:DEFAULT_QOS,
});
args_parser.add_argument('--keepalive', '-k', {
	help:'The keepalive time, in seconds',
	type:'float',
	default:DEFAULT_KEEPALIVE,
});
const args = args_parser.parse_args();
run(args)
.then(() => {
	process.exit(0);
})
.catch((error) => {
	console.error(`Error: ${error.message}`);
	process.exit(1);
});
