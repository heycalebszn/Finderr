const assert = (condition, error_message='Assertion failed') => {
	if (! condition) {
		throw (new Error(error_message));
	}
}

const canonicalize_hex_string = (hex_string, upper_case=true) =>
	hex_string.toUpperCase().replace(/[^0-9A-Fa-f]/g, '')[upper_case ? 'toUpperCase' : 'toLowerCase']()

const canonicalize_uuid = (uuid) => {
	const hex = canonicalize_hex_string(uuid);
	assert((hex.length === 32), `Invalid UUID, must be a string with exactly 32 hexadecimal characters`);
	return `${hex.slice(0, 8)}-${hex.slice(8, 12)}-${hex.slice(12, 16)}-${hex.slice(16, 20)}-${hex.slice(20, 32)}`;
}

const BLUETOOTH_BASE_UUID_SUFFIX = '-0000-1000-8000-00805F9B34FB';

const canonicalize_bluetooth_uuid = (bluetooth_uuid) => {
	if (typeof(bluetooth_uuid) === 'number') {
		bluetooth_uuid = bluetooth_uuid.toString(16);
	}
	bluetooth_uuid = canonicalize_hex_string(bluetooth_uuid);
	if (bluetooth_uuid.length < 8) {
		bluetooth_uuid = `0000000${bluetooth_uuid}`.slice(-8);
	}
	if (bluetooth_uuid.length === 8) {
		bluetooth_uuid += BLUETOOTH_BASE_UUID_SUFFIX;
	}
	return canonicalize_uuid(bluetooth_uuid);
}

const shorten_bluetooth_uuid = (bluetooth_uuid) => {
	const canonical_bluetooth_uuid = canonicalize_bluetooth_uuid(bluetooth_uuid);
	return (canonical_bluetooth_uuid.endsWith(BLUETOOTH_BASE_UUID_SUFFIX) ? parseInt(canonical_bluetooth_uuid.slice(0, 8), 16) : null);
}

const canonicalize_bluetooth_address = (bluetooth_address) => {
	const hex = canonicalize_hex_string(bluetooth_address);
	assert((hex.length === 12), `Invalid Bluetooth address, must be a string with exactly 12 hexadecimal characters`);
	return `${hex.slice(0, 2)}:${hex.slice(2, 4)}:${hex.slice(4, 6)}:${hex.slice(6, 8)}:${hex.slice(8, 10)}:${hex.slice(10, 12)}`;
}

const get_timestamp = () =>
	Date.now()

const time_limit_promise = (promise, timeout_millis, timeout_message=`Promise did not resolve within ${timeout_millis} milliseconds`) =>
	((timeout_millis <= 0)
		? promise
		: (new Promise((resolve, reject) => {
				const timeout = setTimeout(() => {
					reject(timeout_message);
				}, timeout_millis);
				Promise.resolve(promise)
				.then((promise_result) => {
					resolve(promise_result);
				})
				.catch((promise_error) => {
					reject(promise_error);
				})
				.finally(() => {
					clearTimeout(timeout);
				});
			}))
	)

export {canonicalize_bluetooth_address, canonicalize_bluetooth_uuid, canonicalize_hex_string, get_timestamp, shorten_bluetooth_uuid, time_limit_promise};
